%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.3.1

-ifndef(antidote).
-define(antidote, true).

-define(antidote_gpb_version, "4.3.1").

-ifndef('APBCOUNTERUPDATE_PB_H').
-define('APBCOUNTERUPDATE_PB_H', true).
-record('ApbCounterUpdate',
        {inc                    :: integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('APBGETCOUNTERRESP_PB_H').
-define('APBGETCOUNTERRESP_PB_H', true).
-record('ApbGetCounterResp',
        {value                  :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('APBSETUPDATE_PB_H').
-define('APBSETUPDATE_PB_H', true).
-record('ApbSetUpdate',
        {optype                 :: 'ADD' | 'REMOVE' | integer(), % = 1, enum ApbSetUpdate.SetOpType
         adds = []              :: [iodata()] | undefined, % = 2
         rems = []              :: [iodata()] | undefined % = 3
        }).
-endif.

-ifndef('APBGETSETRESP_PB_H').
-define('APBGETSETRESP_PB_H', true).
-record('ApbGetSetResp',
        {value = []             :: [iodata()] | undefined % = 1
        }).
-endif.

-ifndef('APBREGUPDATE_PB_H').
-define('APBREGUPDATE_PB_H', true).
-record('ApbRegUpdate',
        {value                  :: iodata()         % = 1
        }).
-endif.

-ifndef('APBGETREGRESP_PB_H').
-define('APBGETREGRESP_PB_H', true).
-record('ApbGetRegResp',
        {value                  :: iodata()         % = 1
        }).
-endif.

-ifndef('APBGETMVREGRESP_PB_H').
-define('APBGETMVREGRESP_PB_H', true).
-record('ApbGetMVRegResp',
        {values = []            :: [iodata()] | undefined % = 1
        }).
-endif.

-ifndef('APBMAPKEY_PB_H').
-define('APBMAPKEY_PB_H', true).
-record('ApbMapKey',
        {key                    :: iodata(),        % = 1
         type                   :: 'COUNTER' | 'ORSET' | 'LWWREG' | 'MVREG' | 'GMAP' | 'RWSET' | 'RRMAP' | 'FATCOUNTER' | 'FLAG_EW' | 'FLAG_DW' | integer() % = 2, enum CRDT_type
        }).
-endif.

-ifndef('APBMAPUPDATE_PB_H').
-define('APBMAPUPDATE_PB_H', true).
-record('ApbMapUpdate',
        {updates = []           :: [antidote:'ApbMapNestedUpdate'()] | undefined, % = 1
         removedKeys = []       :: [antidote:'ApbMapKey'()] | undefined % = 2
        }).
-endif.

-ifndef('APBMAPNESTEDUPDATE_PB_H').
-define('APBMAPNESTEDUPDATE_PB_H', true).
-record('ApbMapNestedUpdate',
        {key                    :: antidote:'ApbMapKey'(), % = 1
         update                 :: antidote:'ApbUpdateOperation'() % = 2
        }).
-endif.

-ifndef('APBGETMAPRESP_PB_H').
-define('APBGETMAPRESP_PB_H', true).
-record('ApbGetMapResp',
        {entries = []           :: [antidote:'ApbMapEntry'()] | undefined % = 1
        }).
-endif.

-ifndef('APBMAPENTRY_PB_H').
-define('APBMAPENTRY_PB_H', true).
-record('ApbMapEntry',
        {key                    :: antidote:'ApbMapKey'(), % = 1
         value                  :: antidote:'ApbReadObjectResp'() % = 2
        }).
-endif.

-ifndef('APBFLAGUPDATE_PB_H').
-define('APBFLAGUPDATE_PB_H', true).
-record('ApbFlagUpdate',
        {value                  :: boolean() | 0 | 1 % = 1
        }).
-endif.

-ifndef('APBGETFLAGRESP_PB_H').
-define('APBGETFLAGRESP_PB_H', true).
-record('ApbGetFlagResp',
        {value                  :: boolean() | 0 | 1 % = 1
        }).
-endif.

-ifndef('APBCRDTRESET_PB_H').
-define('APBCRDTRESET_PB_H', true).
-record('ApbCrdtReset',
        {
        }).
-endif.

-ifndef('APBOPERATIONRESP_PB_H').
-define('APBOPERATIONRESP_PB_H', true).
-record('ApbOperationResp',
        {success                :: boolean() | 0 | 1, % = 1
         errorcode              :: non_neg_integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('APBTXNPROPERTIES_PB_H').
-define('APBTXNPROPERTIES_PB_H', true).
-record('ApbTxnProperties',
        {read_write             :: non_neg_integer() | undefined, % = 1, 32 bits
         red_blue               :: non_neg_integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('APBBOUNDOBJECT_PB_H').
-define('APBBOUNDOBJECT_PB_H', true).
-record('ApbBoundObject',
        {key                    :: iodata(),        % = 1
         type                   :: 'COUNTER' | 'ORSET' | 'LWWREG' | 'MVREG' | 'GMAP' | 'RWSET' | 'RRMAP' | 'FATCOUNTER' | 'FLAG_EW' | 'FLAG_DW' | integer(), % = 2, enum CRDT_type
         bucket                 :: iodata()         % = 3
        }).
-endif.

-ifndef('APBREADOBJECTS_PB_H').
-define('APBREADOBJECTS_PB_H', true).
-record('ApbReadObjects',
        {boundobjects = []      :: [antidote:'ApbBoundObject'()] | undefined, % = 1
         transaction_descriptor :: iodata()         % = 2
        }).
-endif.

-ifndef('APBUPDATEOP_PB_H').
-define('APBUPDATEOP_PB_H', true).
-record('ApbUpdateOp',
        {boundobject            :: antidote:'ApbBoundObject'(), % = 1
         operation              :: antidote:'ApbUpdateOperation'() % = 2
        }).
-endif.

-ifndef('APBUPDATEOPERATION_PB_H').
-define('APBUPDATEOPERATION_PB_H', true).
-record('ApbUpdateOperation',
        {counterop              :: antidote:'ApbCounterUpdate'() | undefined, % = 1
         setop                  :: antidote:'ApbSetUpdate'() | undefined, % = 2
         regop                  :: antidote:'ApbRegUpdate'() | undefined, % = 3
         mapop                  :: antidote:'ApbMapUpdate'() | undefined, % = 5
         resetop                :: antidote:'ApbCrdtReset'() | undefined, % = 6
         flagop                 :: antidote:'ApbFlagUpdate'() | undefined % = 7
        }).
-endif.

-ifndef('APBUPDATEOBJECTS_PB_H').
-define('APBUPDATEOBJECTS_PB_H', true).
-record('ApbUpdateObjects',
        {updates = []           :: [antidote:'ApbUpdateOp'()] | undefined, % = 1
         transaction_descriptor :: iodata()         % = 2
        }).
-endif.

-ifndef('APBSTARTTRANSACTION_PB_H').
-define('APBSTARTTRANSACTION_PB_H', true).
-record('ApbStartTransaction',
        {timestamp              :: iodata() | undefined, % = 1
         properties             :: antidote:'ApbTxnProperties'() | undefined % = 2
        }).
-endif.

-ifndef('APBABORTTRANSACTION_PB_H').
-define('APBABORTTRANSACTION_PB_H', true).
-record('ApbAbortTransaction',
        {transaction_descriptor :: iodata()         % = 1
        }).
-endif.

-ifndef('APBCOMMITTRANSACTION_PB_H').
-define('APBCOMMITTRANSACTION_PB_H', true).
-record('ApbCommitTransaction',
        {transaction_descriptor :: iodata()         % = 1
        }).
-endif.

-ifndef('APBSTATICUPDATEOBJECTS_PB_H').
-define('APBSTATICUPDATEOBJECTS_PB_H', true).
-record('ApbStaticUpdateObjects',
        {transaction            :: antidote:'ApbStartTransaction'(), % = 1
         updates = []           :: [antidote:'ApbUpdateOp'()] | undefined % = 2
        }).
-endif.

-ifndef('APBSTATICREADOBJECTS_PB_H').
-define('APBSTATICREADOBJECTS_PB_H', true).
-record('ApbStaticReadObjects',
        {transaction            :: antidote:'ApbStartTransaction'(), % = 1
         objects = []           :: [antidote:'ApbBoundObject'()] | undefined % = 2
        }).
-endif.

-ifndef('APBSTARTTRANSACTIONRESP_PB_H').
-define('APBSTARTTRANSACTIONRESP_PB_H', true).
-record('ApbStartTransactionResp',
        {success                :: boolean() | 0 | 1, % = 1
         transaction_descriptor :: iodata() | undefined, % = 2
         errorcode              :: non_neg_integer() | undefined % = 3, 32 bits
        }).
-endif.

-ifndef('APBREADOBJECTRESP_PB_H').
-define('APBREADOBJECTRESP_PB_H', true).
-record('ApbReadObjectResp',
        {counter                :: antidote:'ApbGetCounterResp'() | undefined, % = 1
         set                    :: antidote:'ApbGetSetResp'() | undefined, % = 2
         reg                    :: antidote:'ApbGetRegResp'() | undefined, % = 3
         mvreg                  :: antidote:'ApbGetMVRegResp'() | undefined, % = 4
         map                    :: antidote:'ApbGetMapResp'() | undefined, % = 6
         flag                   :: antidote:'ApbGetFlagResp'() | undefined % = 7
        }).
-endif.

-ifndef('APBREADOBJECTSRESP_PB_H').
-define('APBREADOBJECTSRESP_PB_H', true).
-record('ApbReadObjectsResp',
        {success                :: boolean() | 0 | 1, % = 1
         objects = []           :: [antidote:'ApbReadObjectResp'()] | undefined, % = 2
         errorcode              :: non_neg_integer() | undefined % = 3, 32 bits
        }).
-endif.

-ifndef('APBCOMMITRESP_PB_H').
-define('APBCOMMITRESP_PB_H', true).
-record('ApbCommitResp',
        {success                :: boolean() | 0 | 1, % = 1
         commit_time            :: iodata() | undefined, % = 2
         errorcode              :: non_neg_integer() | undefined % = 3, 32 bits
        }).
-endif.

-ifndef('APBSTATICREADOBJECTSRESP_PB_H').
-define('APBSTATICREADOBJECTSRESP_PB_H', true).
-record('ApbStaticReadObjectsResp',
        {objects                :: antidote:'ApbReadObjectsResp'(), % = 1
         committime             :: antidote:'ApbCommitResp'() % = 2
        }).
-endif.

-ifndef('APBCREATEDC_PB_H').
-define('APBCREATEDC_PB_H', true).
-record('ApbCreateDC',
        {nodes = []             :: [iolist()] | undefined % = 1
        }).
-endif.

-ifndef('APBGETCONNECTIONDESCRIPTOR_PB_H').
-define('APBGETCONNECTIONDESCRIPTOR_PB_H', true).
-record('ApbGetConnectionDescriptor',
        {
        }).
-endif.

-ifndef('APBGETCONNECTIONDESCRIPTORRESPONSE_PB_H').
-define('APBGETCONNECTIONDESCRIPTORRESPONSE_PB_H', true).
-record('ApbGetConnectionDescriptorResponse',
        {success                :: boolean() | 0 | 1, % = 1
         conDesc                :: iodata() | undefined, % = 2
         errorcode              :: non_neg_integer() | undefined % = 3, 32 bits
        }).
-endif.

-ifndef('APBCONNECTTODCS_PB_H').
-define('APBCONNECTTODCS_PB_H', true).
-record('ApbConnectToDcs',
        {descriptors = []       :: [iodata()] | undefined % = 1
        }).
-endif.

-endif.
